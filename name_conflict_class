/* File: name-conflict.h */
void print(int x, int y) { cout << x << " , " << y << endl; }

class B
{
private:
    int x, y;

public:
    B(int p = 1, int q = 2) : x(p), y(q)
    {
        cout << "Base class constructor: ";
        print(x, y);
    }
    void f() const
    {
        cout << "Base class: ";
        print(x, y);
    }
};

class D : public B
{
private:
    float x, y;

public:
    D() : x(10.2), y(20.6) { cout << "Derived class constructor\n"; }
    void f() const
    {
        cout << "Derived class: ";
        print(x, y);
        B::f();
    }
};
#include <iostream> /* File: name-conflict.cpp */
using namespace std;
#include "name-conflict.h"

void smart(const B *p)
{
    cout << "Inside smart(): ";
    p->f();
}

int main()
{
    B base(5, 6);
    cout << endl;
    D derive;
    cout << endl;

    B *bp = &base;
    bp->f();
    cout << endl;
    D *dp = &derive;
    dp->f();
    cout << endl;

    bp = &derive;
    bp->f();
    cout << endl;

    cout << "Call smart(bp): ";
    smart(bp);
    cout << "Call smart(dp): ";
    smart(dp);
    return 0;
}
// Base class constructor: 5 , 6

// Base class constructor: 1 , 2
// Derived class constructor

// Base class: 5 , 6

// Derived class: 10 , 20
// Base class: 1 , 2

// Base class: 1 , 2

// Call smart(bp): Inside smart(): Base class: 1 , 2
// Call smart(dp): Inside smart(): Base class: 1 , 2
